{"version":3,"sources":["App5.js","App1.js","serviceWorker.js","index.js"],"names":["App5","state","key","changeState","bind","callback1","alert","e","this","flag","setState","myDiv","document","getElementById","ReactDOM","findDOMNode","style","border","forceUpdate","Math","random","id","onClick","React","Component","StudentName","List","props","prop12","Boolean","window","location","hostname","match","render","propArray","propBool","props1","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA2GeA,M,YArGX,aACC,IAAD,uBACE,+CAEKC,MAAM,CAACC,IAAI,mBAEhB,EAAKC,YAAY,EAAKA,YAC3BC,KADsB,gBAEtB,EAAKC,UAAU,EAAKA,UAAUD,KAAf,gBAPZ,S,yEAiBGE,MAAM,yB,kCAOGC,GAER,IAAiB,IAAdC,KAAKC,KACR,CACAD,KAAKE,SAAS,CAACR,IAAI,kBACnB,IAAIS,EAAQC,SAASC,eAAe,MACpCC,IAASC,YAAYJ,GAAOK,MAAMC,OAAO,gBACzCT,KAAKC,MAAK,MAEN,CACAD,KAAKE,SAAS,CAACR,IAAI,mBACfS,EAAQC,SAASC,eAAe,MACpCC,IAASC,YAAYJ,GAAOK,MAAMC,OAAO,gBACzCT,KAAKC,MAAK,EAIdD,KAAKU,gB,+BAUP,OACI,6BACI,gDAAsBC,KAAKC,UAC3B,4BAAKZ,KAAKP,MAAMC,KAChB,4BAAQmB,GAAI,KAAKC,QAASd,KAAKL,aAA/B,UACA,8CAAoBgB,KAAKC,UAEzB,yBAAKC,GAAK,MAAV,sB,GA9DKE,IAAMC,WCiDnBC,GAhDaF,IAAMC,U,iLAkDnB,OACG,6BACG,wD,GAJcD,IAAMC,YAS1BE,E,iLAEA,OACG,4BACG,4BAAKlB,KAAKmB,MAAMC,QAChB,4BAAKpB,KAAKmB,MAAMC,OAAQ,QAAQ,c,GALzBL,IAAMC,WCjDLK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNnB,IAASoB,OAAO,kBAAC,EAAD,CAAMC,UAAW,CAAC,OAAQC,UAAU,EAAMC,OAAU,IAAOzB,SAASC,eAAe,SD0H7F,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1d4ad0fa.chunk.js","sourcesContent":["import React, { Component } from 'react';  \r\nimport ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';  \r\nclass App5 extends React.Component {  \r\n\r\n\r\n    constructor()\r\n    {\r\n      super();\r\n\r\n      this.state={key:\"FIrtst stateval\"};\r\n\r\n      this.changeState=this.changeState\r\n.bind(this);\r\n this.callback1=this.callback1.bind(this);\r\n    var flag=true;\r\n\r\n    }\r\n\r\n\r\n    callback1()\r\n    {\r\n\r\n   \r\n       alert(\"Componnenet updated\");\r\n\r\n\r\n  \r\n\r\n    }\r\n\r\n    changeState(e) {\r\n        \r\n        if(this.flag === true)\r\n        {\r\n        this.setState({key:\"CHanged state\"});\r\n        var myDiv = document.getElementById('d1'); \r\n        ReactDOM.findDOMNode(myDiv).style.border=\"solid #00ffdd\";\r\n        this.flag=false;\r\n        }\r\n        else{\r\n            this.setState({key:\"CHanged state1\"});\r\n            var myDiv = document.getElementById('d1'); \r\n            ReactDOM.findDOMNode(myDiv).style.border=\"solid #000000\";\r\n            this.flag=true;\r\n\r\n        }\r\n\r\n        this.forceUpdate();\r\n    }\r\n\r\n   \r\n   \r\n\r\n\r\n\r\n \r\n   render() {  \r\n      return (  \r\n          <div>  \r\n              <h1>Render component {Math.random()}</h1>\r\n              <h1>{this.state.key}</h1>  \r\n              <button id =\"b1\" onClick={this.changeState}>Update</button>\r\n              <h2>Random number: {Math.random()}</h2>\r\n\r\n              <div id = \"d1\">THIS IS DIV 1</div>\r\n        </div>  \r\n        ); \r\n        \r\n        \r\n   } \r\n   \r\n\r\n   \r\n   \r\n}  \r\n\r\n\r\n\r\n\r\n\r\nfunction validate(props, propName, componentName) { \r\n        var item = props[propName]; \r\n       // alert(\"Hello1\" + item);\r\n         if (!Number.isInteger(item)) { \r\n            \r\n           return new Error('Validation failed!'); \r\n          } \r\n       } \r\n    \r\n    \r\n\r\n\r\nApp5.propTypes = {  \r\n    propArray: PropTypes.array.isRequired,  \r\n    propBool: PropTypes.bool.isRequired,  \r\n    propFunc: PropTypes.func,  \r\n    props1: validate,  \r\n    propString: PropTypes.string,   \r\n}  \r\n/*App5.defaultProps = {  \r\n    propArray: [1,2,3,4,5],  \r\n    propBool: \"true\",  \r\n    propFunc: function(x){return x+5},  \r\n    propNumber: 1,  \r\n    propString: \"JavaTpoint\",  \r\n}  */\r\nexport default App5; ","\r\nimport PropTypes from 'prop-types';  \r\n\r\nimport React, { Component } from 'react';  \r\nclass App1 extends React.Component {  \r\n constructor() {  \r\n      super();  \r\n      /*this.state = {  \r\n         data:   \r\n         [  \r\n            {             \r\n               \"name\":\"Abhishek\"             \r\n            },  \r\n            {            \r\n               \"name\":\"Saharsh\"             \r\n            },  \r\n            {    \r\n               \"name\":\"Ajay\"          \r\n            }  \r\n         ]  \r\n      }  */\r\n\r\n   this.state = {  \r\n         data:   \r\n         [  \r\n            \"Abhishek ch\" ,            \r\n            \"Saharsh cv\" ,            \r\n            \"Ajay cf\"          \r\n              \r\n         ]  \r\n      }  \r\n\r\n\r\n\r\n\r\n   }  \r\n   render() {  \r\n      return (  \r\n         <table  border=\"3\">  \r\n            <th><td>test col</td></th>\r\n            <td>\r\n              \r\n            <StudentName/>  \r\n            <ul>            \r\n                {this.state.data.map((item) => <List prop12= {item} />)}           \r\n                \r\n            </ul>\r\n            </td>  \r\n         </table>  \r\n      );  \r\n   }  \r\n}  \r\nclass StudentName extends React.Component {  \r\n   render() {  \r\n      return (  \r\n         <div>  \r\n            <h1>Student Name Detail</h1>  \r\n         </div>  \r\n      );  \r\n   }  \r\n}  \r\nclass List extends React.Component {  \r\n   render() {  \r\n      return (  \r\n         <ul>            \r\n            <li>{this.props.prop12}</li> \r\n            <li>{this.props.prop12? \"true1\":\"false\"}</li>  \r\n         </ul>  \r\n      ); \r\n      \r\n      \r\n       \r\n   } \r\n   \r\n     \r\n}  \r\n\r\n\r\n/*List.propTypes = {\r\n\r\n   prop12: PropTypes.number\r\n                                                                                                               \r\n};*/\r\n\r\n/*List.defaultProps = {  \r\n   propArray: [1,2,3,4,5],  \r\n   propBool: true,  \r\n   propFunc: function(x){return x+5},  \r\n   prop12: null,  \r\n   propString: \"JavaTpoint\",  \r\n}  */\r\n\r\n\r\n\r\n\r\nexport default App1; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App5 from './App5';\nimport App1 from './App1';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App5 propArray={['val']} propBool={true} props1 = {1} />, document.getElementById('root'));\n//ReactDOM.render(<App1 />, document.getElementById('root1'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}